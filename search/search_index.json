{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>A simple async RCON library for Ark. Inspired by https://github.com/scottjones4k/ark_rcon</p> <p>This RCON client is designed to work with Ark SE servers with the intention of integrating its features into a Discord bot, or other asynchronous project.</p> <p>Features: 1. saveworld - ability to send a save world command to your Ark SE server. 2. broadcast - Send a global broadcast message to your server. 3. chat - send chats to the global channel as server, can provide a username 4. chat history - WIP pull the chat history from the server</p>"},{"location":"#basic-usage","title":"Basic Usage","text":"<p>Getting a list of online players: <pre><code>import asyncio\n\nfrom async_arkon import Client\n\nhost = \"192.168.1.200\"\nport = 27015\npassword = \"my_super_secret_admin_password\"\n\n\nasync def main():\n    async with Client(host=host, port=port, password=password) as client:\n        players = await client.fetch_online_players()\n\n        print(players)\n\n\nasyncio.run(main())\n</code></pre> This can also be done without using async context managers. <pre><code>import asyncio\n\nfrom async_arkon import Client\n\nhost = \"192.168.1.200\"\nport = 27015\npassword = \"my_super_secret_admin_password\"\n\n\nasync def main():\n\n    client = Client(host=host, port=port, password=password)\n    await client.login()\n\n    players = await client.fetch_online_players()\n    await client.close()\n\n    print(players)\n\n\nasyncio.run(main())\n</code></pre></p>"},{"location":"license/","title":"License","text":"<p>Apache License                            Version 2.0, January 2004                         http://www.apache.org/licenses/</p> <p>TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION</p> <ol> <li> <p>Definitions.</p> <p>\"License\" shall mean the terms and conditions for use, reproduction,   and distribution as defined by Sections 1 through 9 of this document.</p> <p>\"Licensor\" shall mean the copyright owner or entity authorized by   the copyright owner that is granting the License.</p> <p>\"Legal Entity\" shall mean the union of the acting entity and all   other entities that control, are controlled by, or are under common   control with that entity. For the purposes of this definition,   \"control\" means (i) the power, direct or indirect, to cause the   direction or management of such entity, whether by contract or   otherwise, or (ii) ownership of fifty percent (50%) or more of the   outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\"You\" (or \"Your\") shall mean an individual or Legal Entity   exercising permissions granted by this License.</p> <p>\"Source\" form shall mean the preferred form for making modifications,   including but not limited to software source code, documentation   source, and configuration files.</p> <p>\"Object\" form shall mean any form resulting from mechanical   transformation or translation of a Source form, including but   not limited to compiled object code, generated documentation,   and conversions to other media types.</p> <p>\"Work\" shall mean the work of authorship, whether in Source or   Object form, made available under the License, as indicated by a   copyright notice that is included in or attached to the work   (an example is provided in the Appendix below).</p> <p>\"Derivative Works\" shall mean any work, whether in Source or Object   form, that is based on (or derived from) the Work and for which the   editorial revisions, annotations, elaborations, or other modifications   represent, as a whole, an original work of authorship. For the purposes   of this License, Derivative Works shall not include works that remain   separable from, or merely link (or bind by name) to the interfaces of,   the Work and Derivative Works thereof.</p> <p>\"Contribution\" shall mean any work of authorship, including   the original version of the Work and any modifications or additions   to that Work or Derivative Works thereof, that is intentionally   submitted to Licensor for inclusion in the Work by the copyright owner   or by an individual or Legal Entity authorized to submit on behalf of   the copyright owner. For the purposes of this definition, \"submitted\"   means any form of electronic, verbal, or written communication sent   to the Licensor or its representatives, including but not limited to   communication on electronic mailing lists, source code control systems,   and issue tracking systems that are managed by, or on behalf of, the   Licensor for the purpose of discussing and improving the Work, but   excluding communication that is conspicuously marked or otherwise   designated in writing by the copyright owner as \"Not a Contribution.\"</p> <p>\"Contributor\" shall mean Licensor and any individual or Legal Entity   on behalf of whom a Contribution has been received by Licensor and   subsequently incorporated within the Work.</p> </li> <li> <p>Grant of Copyright License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       copyright license to reproduce, prepare Derivative Works of,       publicly display, publicly perform, sublicense, and distribute the       Work and such Derivative Works in Source or Object form.</p> </li> <li> <p>Grant of Patent License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       (except as stated in this section) patent license to make, have made,       use, offer to sell, sell, import, and otherwise transfer the Work,       where such license applies only to those patent claims licensable       by such Contributor that are necessarily infringed by their       Contribution(s) alone or by combination of their Contribution(s)       with the Work to which such Contribution(s) was submitted. If You       institute patent litigation against any entity (including a       cross-claim or counterclaim in a lawsuit) alleging that the Work       or a Contribution incorporated within the Work constitutes direct       or contributory patent infringement, then any patent licenses       granted to You under this License for that Work shall terminate       as of the date such litigation is filed.</p> </li> <li> <p>Redistribution. You may reproduce and distribute copies of the       Work or Derivative Works thereof in any medium, with or without       modifications, and in Source or Object form, provided that You       meet the following conditions:</p> <p>(a) You must give any other recipients of the Work or       Derivative Works a copy of this License; and</p> <p>(b) You must cause any modified files to carry prominent notices       stating that You changed the files; and</p> <p>(c) You must retain, in the Source form of any Derivative Works       that You distribute, all copyright, patent, trademark, and       attribution notices from the Source form of the Work,       excluding those notices that do not pertain to any part of       the Derivative Works; and</p> <p>(d) If the Work includes a \"NOTICE\" text file as part of its       distribution, then any Derivative Works that You distribute must       include a readable copy of the attribution notices contained       within such NOTICE file, excluding those notices that do not       pertain to any part of the Derivative Works, in at least one       of the following places: within a NOTICE text file distributed       as part of the Derivative Works; within the Source form or       documentation, if provided along with the Derivative Works; or,       within a display generated by the Derivative Works, if and       wherever such third-party notices normally appear. The contents       of the NOTICE file are for informational purposes only and       do not modify the License. You may add Your own attribution       notices within Derivative Works that You distribute, alongside       or as an addendum to the NOTICE text from the Work, provided       that such additional attribution notices cannot be construed       as modifying the License.</p> <p>You may add Your own copyright statement to Your modifications and   may provide additional or different license terms and conditions   for use, reproduction, or distribution of Your modifications, or   for any such Derivative Works as a whole, provided Your use,   reproduction, and distribution of the Work otherwise complies with   the conditions stated in this License.</p> </li> <li> <p>Submission of Contributions. Unless You explicitly state otherwise,       any Contribution intentionally submitted for inclusion in the Work       by You to the Licensor shall be under the terms and conditions of       this License, without any additional terms or conditions.       Notwithstanding the above, nothing herein shall supersede or modify       the terms of any separate license agreement you may have executed       with Licensor regarding such Contributions.</p> </li> <li> <p>Trademarks. This License does not grant permission to use the trade       names, trademarks, service marks, or product names of the Licensor,       except as required for reasonable and customary use in describing the       origin of the Work and reproducing the content of the NOTICE file.</p> </li> <li> <p>Disclaimer of Warranty. Unless required by applicable law or       agreed to in writing, Licensor provides the Work (and each       Contributor provides its Contributions) on an \"AS IS\" BASIS,       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       implied, including, without limitation, any warranties or conditions       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A       PARTICULAR PURPOSE. You are solely responsible for determining the       appropriateness of using or redistributing the Work and assume any       risks associated with Your exercise of permissions under this License.</p> </li> <li> <p>Limitation of Liability. In no event and under no legal theory,       whether in tort (including negligence), contract, or otherwise,       unless required by applicable law (such as deliberate and grossly       negligent acts) or agreed to in writing, shall any Contributor be       liable to You for damages, including any direct, indirect, special,       incidental, or consequential damages of any character arising as a       result of this License or out of the use or inability to use the       Work (including but not limited to damages for loss of goodwill,       work stoppage, computer failure or malfunction, or any and all       other commercial damages or losses), even if such Contributor       has been advised of the possibility of such damages.</p> </li> <li> <p>Accepting Warranty or Additional Liability. While redistributing       the Work or Derivative Works thereof, You may choose to offer,       and charge a fee for, acceptance of support, warranty, indemnity,       or other liability obligations and/or rights consistent with this       License. However, in accepting such obligations, You may act only       on Your own behalf and on Your sole responsibility, not on behalf       of any other Contributor, and only if You agree to indemnify,       defend, and hold each Contributor harmless for any liability       incurred by, or claims asserted against, such Contributor by reason       of your accepting any such warranty or additional liability.</p> </li> </ol> <p>END OF TERMS AND CONDITIONS</p> <p>APPENDIX: How to apply the Apache License to your work.</p> <pre><code>  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.\n</code></pre> <p>Copyright [yyyy] [name of copyright owner]</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\");    you may not use this file except in compliance with the License.    You may obtain a copy of the License at</p> <pre><code>   http://www.apache.org/licenses/LICENSE-2.0\n</code></pre> <p>Unless required by applicable law or agreed to in writing, software    distributed under the License is distributed on an \"AS IS\" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    See the License for the specific language governing permissions and    limitations under the License.</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>async_arkon<ul> <li>client</li> <li>types<ul> <li>base</li> <li>logline</li> <li>mixins</li> <li>packet</li> <li>player</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/async_arkon/client/","title":"client","text":""},{"location":"reference/async_arkon/client/#async_arkon.client.Client","title":"<code>Client</code>","text":"<p>             Bases: <code>RCONClient</code>, <code>AdminMixin</code>, <code>InfoMixin</code>, <code>ChatMixin</code></p> <p>A high-level RCON client that provides extended functionalities.</p> <p>Parameters:</p> <ul> <li> <code>host</code>             (<code>str</code>)         \u2013          <p>The host address of the RCON server.</p> </li> <li> <code>port</code>             (<code>int</code>)         \u2013          <p>The port number of the RCON server.</p> </li> <li> <code>password</code>             (<code>str</code>)         \u2013          <p>The password for RCON authentication.</p> </li> <li> <code>timeout</code>             (<code>Optional[float]</code>, default:                 <code>None</code> )         \u2013          <p>The timeout duration for connections in seconds.</p> </li> </ul> Source code in <code>src\\async_arkon\\client.py</code> <pre><code>class Client(RCONClient, AdminMixin, InfoMixin, ChatMixin):\n    \"\"\"\n    A high-level RCON client that provides extended functionalities.\n\n    Parameters\n    ----------\n    host : str\n        The host address of the RCON server.\n    port : int\n        The port number of the RCON server.\n    password : str\n        The password for RCON authentication.\n    timeout : Optional[float], optional\n        The timeout duration for connections in seconds.\n    \"\"\"\n\n    def __init__(\n        self, host: str, port: int, password: str, *, timeout: Optional[float] = None\n    ) -&gt; None:\n        super().__init__(host, port, timeout=timeout)\n\n        self.password = password\n        self.logged_in: bool = False\n\n    async def __aenter__(self) -&gt; Self:\n        \"\"\"Connect to the RCON server and login.\"\"\"\n        await super().__aenter__()\n        await self.login()\n        return self\n\n    async def __aexit__(\n        self,\n        exc_type: type[BaseException] | None,\n        exc_value: BaseException | None,\n        traceback: TracebackType | None,\n    ) -&gt; None:\n        \"\"\"Log out and disconnect from RCON server.\"\"\"\n        await super().__aexit__(exc_type, exc_value, traceback)\n        self.logged_in = False\n\n    @overload\n    async def run(self, command: str, *arguments: str, raw: Literal[False]) -&gt; str:\n        ...\n\n    @overload\n    async def run(self, command: str, *arguments: str, raw: Literal[True]) -&gt; Packet:\n        ...\n\n    async def run(self, command: str, *arguments: str, raw: bool = False) -&gt; Union[Packet, str]:\n        \"\"\"Build and execute and send an RCON command to the server.\n\n        Parameters\n        ----------\n        command: str\n            The command being sent to the RCON server.\n        *arguments: str\n            Extra arguments for the command.\n        raw: bool, False\n            Whether the response should be a raw Packet or the payload str.\n\n        Returns\n        -------\n        Union[Packet, str]\n            The raw response Packet or the str value of Packet.payload.\n        \"\"\"\n        command = \" \".join((command, *arguments))\n        packet = Packet.from_command(command)\n        response = await self.communicate(packet)\n        return response if raw else response.payload\n\n    async def login(self) -&gt; None:\n        \"\"\"Execute the login command to the RCON server.\n\n        Raises\n        ------\n        errors.InvalidCredentials\n            The provided password was refused by the server.\n        \"\"\"\n        if self.logged_in:\n            return\n\n        if not self._writer:\n            await self.connect()\n\n        self.logged_in = True\n\n        packet = Packet.from_login(self.password)\n\n        try:\n            await self.communicate(packet)\n        except errors.RequestIdMismatch:\n            raise errors.InvalidCredentials from None\n\n        return\n</code></pre>"},{"location":"reference/async_arkon/client/#async_arkon.client.Client.__aenter__","title":"<code>__aenter__()</code>  <code>async</code>","text":"<p>Connect to the RCON server and login.</p> Source code in <code>src\\async_arkon\\client.py</code> <pre><code>async def __aenter__(self) -&gt; Self:\n    \"\"\"Connect to the RCON server and login.\"\"\"\n    await super().__aenter__()\n    await self.login()\n    return self\n</code></pre>"},{"location":"reference/async_arkon/client/#async_arkon.client.Client.__aexit__","title":"<code>__aexit__(exc_type, exc_value, traceback)</code>  <code>async</code>","text":"<p>Log out and disconnect from RCON server.</p> Source code in <code>src\\async_arkon\\client.py</code> <pre><code>async def __aexit__(\n    self,\n    exc_type: type[BaseException] | None,\n    exc_value: BaseException | None,\n    traceback: TracebackType | None,\n) -&gt; None:\n    \"\"\"Log out and disconnect from RCON server.\"\"\"\n    await super().__aexit__(exc_type, exc_value, traceback)\n    self.logged_in = False\n</code></pre>"},{"location":"reference/async_arkon/client/#async_arkon.client.Client.login","title":"<code>login()</code>  <code>async</code>","text":"<p>Execute the login command to the RCON server.</p> <p>Raises:</p> <ul> <li> <code>InvalidCredentials</code>           \u2013          <p>The provided password was refused by the server.</p> </li> </ul> Source code in <code>src\\async_arkon\\client.py</code> <pre><code>async def login(self) -&gt; None:\n    \"\"\"Execute the login command to the RCON server.\n\n    Raises\n    ------\n    errors.InvalidCredentials\n        The provided password was refused by the server.\n    \"\"\"\n    if self.logged_in:\n        return\n\n    if not self._writer:\n        await self.connect()\n\n    self.logged_in = True\n\n    packet = Packet.from_login(self.password)\n\n    try:\n        await self.communicate(packet)\n    except errors.RequestIdMismatch:\n        raise errors.InvalidCredentials from None\n\n    return\n</code></pre>"},{"location":"reference/async_arkon/client/#async_arkon.client.Client.run","title":"<code>run(command, *arguments, raw=False)</code>  <code>async</code>","text":"<p>Build and execute and send an RCON command to the server.</p> <p>Parameters:</p> <ul> <li> <code>command</code>             (<code>str</code>)         \u2013          <p>The command being sent to the RCON server.</p> </li> <li> <code>*arguments</code>             (<code>str</code>, default:                 <code>()</code> )         \u2013          <p>Extra arguments for the command.</p> </li> <li> <code>raw</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether the response should be a raw Packet or the payload str.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Union[Packet, str]</code>         \u2013          <p>The raw response Packet or the str value of Packet.payload.</p> </li> </ul> Source code in <code>src\\async_arkon\\client.py</code> <pre><code>async def run(self, command: str, *arguments: str, raw: bool = False) -&gt; Union[Packet, str]:\n    \"\"\"Build and execute and send an RCON command to the server.\n\n    Parameters\n    ----------\n    command: str\n        The command being sent to the RCON server.\n    *arguments: str\n        Extra arguments for the command.\n    raw: bool, False\n        Whether the response should be a raw Packet or the payload str.\n\n    Returns\n    -------\n    Union[Packet, str]\n        The raw response Packet or the str value of Packet.payload.\n    \"\"\"\n    command = \" \".join((command, *arguments))\n    packet = Packet.from_command(command)\n    response = await self.communicate(packet)\n    return response if raw else response.payload\n</code></pre>"},{"location":"reference/async_arkon/types/base/","title":"base","text":""},{"location":"reference/async_arkon/types/base/#async_arkon.types.base.RCONClient","title":"<code>RCONClient</code>","text":"<p>A basic client for handling RCON connections.</p> <p>Parameters:</p> <ul> <li> <code>host</code>             (<code>str</code>)         \u2013          <p>The host address of the RCON server.</p> </li> <li> <code>port</code>             (<code>int</code>)         \u2013          <p>The port number of the RCON server.</p> </li> <li> <code>timeout</code>             (<code>Optional[float]</code>, default:                 <code>None</code> )         \u2013          <p>The timeout duration for connections in seconds.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>_reader</code>             (<code>Optional[StreamReader]</code>)         \u2013          <p>StreamReader object for reading data from the server.</p> </li> <li> <code>_writer</code>             (<code>Optional[StreamWriter]</code>)         \u2013          <p>StreamWriter object for sending data to the server.</p> </li> </ul> Source code in <code>src\\async_arkon\\types\\base.py</code> <pre><code>class RCONClient:\n    \"\"\"\n    A basic client for handling RCON connections.\n\n    Parameters\n    ----------\n    host : str\n        The host address of the RCON server.\n    port : int\n        The port number of the RCON server.\n    timeout : Optional[float], optional\n        The timeout duration for connections in seconds.\n\n    Attributes\n    ----------\n    _reader : Optional[asyncio.StreamReader]\n        StreamReader object for reading data from the server.\n    _writer : Optional[asyncio.StreamWriter]\n        StreamWriter object for sending data to the server.\n    \"\"\"\n\n    def __init__(self, host: str, port: int, timeout: Optional[float] = None) -&gt; None:\n        self.host = host\n        self.port = port\n        self.timeout = timeout\n\n        self._reader: Optional[asyncio.StreamReader] = None\n        self._writer: Optional[asyncio.StreamWriter] = None\n\n        self.logged_in: bool = False\n\n    async def __aenter__(self) -&gt; Self:\n        \"\"\"Connect to the server via context manager.\"\"\"\n        await self.connect()\n        return self\n\n    async def __aexit__(\n        self,\n        exc_type: Optional[Type[BaseException]],\n        exc_value: Optional[BaseException],\n        traceback: Optional[types.TracebackType],\n    ) -&gt; None:\n        \"\"\"Close the connection when the context manager has finished.\"\"\"\n        await self.close()\n\n    async def reconnect(self) -&gt; None:\n        \"\"\"Reconnect to the server.\"\"\"\n        await self.close()\n        await self.connect()\n\n    async def connect(self) -&gt; None:\n        \"\"\"Connect to the server.\"\"\"\n        connect_coro = asyncio.open_connection(host=self.host, port=self.port)\n        if self.timeout:\n            connect_coro = asyncio.wait_for(connect_coro, timeout=self.timeout)\n\n        try:\n            self._reader, self._writer = await connect_coro\n        except asyncio.TimeoutError:\n            raise errors.ConnectionTimedOut from None\n\n    async def close(self) -&gt; None:\n        \"\"\"Close the server connection.\"\"\"\n        if not self._writer:\n            return\n\n        self._writer.close()\n        await self._writer.wait_closed()\n\n        self._writer = None\n        self._reader = None\n\n    async def communicate(self, packet: Packet) -&gt; Packet:\n        \"\"\"Send and receive an RCON Packet to the server.\n\n        Parameters\n        ----------\n        packet: Packet\n            The packet being sent to the server\n\n        Raises\n        ------\n        errors.NotConnectedError\n            The client is not connected to the RCON server\n        errors.NotLoggedIn\n            The client is connected, but is not logged in.\n        errors.RequestIDMismatch\n            The sent and received packets do not have matching IDs.\n\n        Returns\n        -------\n        Packet\n            The packet response from the server.\n        \"\"\"\n        if not self._writer or not self._reader:\n            msg = \"Client not is connected to the host. Please connect before logging in.\"\n            raise errors.NotConnectedError(msg)\n\n        if not self.logged_in:\n            msg = \"You connected to the RCON server but have not logged in.\"\n            raise errors.NotLoggedIn(msg)\n\n        self._writer.write(bytes(packet))\n        await self._writer.drain()\n        header = await self._reader.read(4)\n        length = int.from_bytes(header, \"little\")\n        payload = await self._reader.read(length)\n        response = Packet.from_bytes(payload)\n\n        if response.request_id != packet.request_id:\n            raise errors.RequestIdMismatch(packet.request_id, response.request_id)\n\n        return response\n</code></pre>"},{"location":"reference/async_arkon/types/base/#async_arkon.types.base.RCONClient.__aenter__","title":"<code>__aenter__()</code>  <code>async</code>","text":"<p>Connect to the server via context manager.</p> Source code in <code>src\\async_arkon\\types\\base.py</code> <pre><code>async def __aenter__(self) -&gt; Self:\n    \"\"\"Connect to the server via context manager.\"\"\"\n    await self.connect()\n    return self\n</code></pre>"},{"location":"reference/async_arkon/types/base/#async_arkon.types.base.RCONClient.__aexit__","title":"<code>__aexit__(exc_type, exc_value, traceback)</code>  <code>async</code>","text":"<p>Close the connection when the context manager has finished.</p> Source code in <code>src\\async_arkon\\types\\base.py</code> <pre><code>async def __aexit__(\n    self,\n    exc_type: Optional[Type[BaseException]],\n    exc_value: Optional[BaseException],\n    traceback: Optional[types.TracebackType],\n) -&gt; None:\n    \"\"\"Close the connection when the context manager has finished.\"\"\"\n    await self.close()\n</code></pre>"},{"location":"reference/async_arkon/types/base/#async_arkon.types.base.RCONClient.close","title":"<code>close()</code>  <code>async</code>","text":"<p>Close the server connection.</p> Source code in <code>src\\async_arkon\\types\\base.py</code> <pre><code>async def close(self) -&gt; None:\n    \"\"\"Close the server connection.\"\"\"\n    if not self._writer:\n        return\n\n    self._writer.close()\n    await self._writer.wait_closed()\n\n    self._writer = None\n    self._reader = None\n</code></pre>"},{"location":"reference/async_arkon/types/base/#async_arkon.types.base.RCONClient.communicate","title":"<code>communicate(packet)</code>  <code>async</code>","text":"<p>Send and receive an RCON Packet to the server.</p> <p>Parameters:</p> <ul> <li> <code>packet</code>             (<code>Packet</code>)         \u2013          <p>The packet being sent to the server</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>NotConnectedError</code>           \u2013          <p>The client is not connected to the RCON server</p> </li> <li> <code>NotLoggedIn</code>           \u2013          <p>The client is connected, but is not logged in.</p> </li> <li> <code>RequestIDMismatch</code>           \u2013          <p>The sent and received packets do not have matching IDs.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Packet</code>         \u2013          <p>The packet response from the server.</p> </li> </ul> Source code in <code>src\\async_arkon\\types\\base.py</code> <pre><code>async def communicate(self, packet: Packet) -&gt; Packet:\n    \"\"\"Send and receive an RCON Packet to the server.\n\n    Parameters\n    ----------\n    packet: Packet\n        The packet being sent to the server\n\n    Raises\n    ------\n    errors.NotConnectedError\n        The client is not connected to the RCON server\n    errors.NotLoggedIn\n        The client is connected, but is not logged in.\n    errors.RequestIDMismatch\n        The sent and received packets do not have matching IDs.\n\n    Returns\n    -------\n    Packet\n        The packet response from the server.\n    \"\"\"\n    if not self._writer or not self._reader:\n        msg = \"Client not is connected to the host. Please connect before logging in.\"\n        raise errors.NotConnectedError(msg)\n\n    if not self.logged_in:\n        msg = \"You connected to the RCON server but have not logged in.\"\n        raise errors.NotLoggedIn(msg)\n\n    self._writer.write(bytes(packet))\n    await self._writer.drain()\n    header = await self._reader.read(4)\n    length = int.from_bytes(header, \"little\")\n    payload = await self._reader.read(length)\n    response = Packet.from_bytes(payload)\n\n    if response.request_id != packet.request_id:\n        raise errors.RequestIdMismatch(packet.request_id, response.request_id)\n\n    return response\n</code></pre>"},{"location":"reference/async_arkon/types/base/#async_arkon.types.base.RCONClient.connect","title":"<code>connect()</code>  <code>async</code>","text":"<p>Connect to the server.</p> Source code in <code>src\\async_arkon\\types\\base.py</code> <pre><code>async def connect(self) -&gt; None:\n    \"\"\"Connect to the server.\"\"\"\n    connect_coro = asyncio.open_connection(host=self.host, port=self.port)\n    if self.timeout:\n        connect_coro = asyncio.wait_for(connect_coro, timeout=self.timeout)\n\n    try:\n        self._reader, self._writer = await connect_coro\n    except asyncio.TimeoutError:\n        raise errors.ConnectionTimedOut from None\n</code></pre>"},{"location":"reference/async_arkon/types/base/#async_arkon.types.base.RCONClient.reconnect","title":"<code>reconnect()</code>  <code>async</code>","text":"<p>Reconnect to the server.</p> Source code in <code>src\\async_arkon\\types\\base.py</code> <pre><code>async def reconnect(self) -&gt; None:\n    \"\"\"Reconnect to the server.\"\"\"\n    await self.close()\n    await self.connect()\n</code></pre>"},{"location":"reference/async_arkon/types/logline/","title":"logline","text":"<p>Information about log lines.</p>"},{"location":"reference/async_arkon/types/logline/#async_arkon.types.logline.LogLine","title":"<code>LogLine</code>","text":"<p>             Bases: <code>NamedTuple</code></p> <p>Log information.</p> Source code in <code>src\\async_arkon\\types\\logline.py</code> <pre><code>class LogLine(NamedTuple):\n    \"\"\"Log information.\"\"\"\n\n    time: str\n    log: str\n\n    @classmethod\n    def from_response(cls, text: str) -&gt; List[Self]:\n        \"\"\"Create log lines from a server response.\"\"\"\n        if text == \"Server received, But no response!! \\n \":\n            return []\n\n        return [cls(match.group(1), match.group(2)) for match in REGEX.finditer(text) if match]\n</code></pre>"},{"location":"reference/async_arkon/types/logline/#async_arkon.types.logline.LogLine.from_response","title":"<code>from_response(text)</code>  <code>classmethod</code>","text":"<p>Create log lines from a server response.</p> Source code in <code>src\\async_arkon\\types\\logline.py</code> <pre><code>@classmethod\ndef from_response(cls, text: str) -&gt; List[Self]:\n    \"\"\"Create log lines from a server response.\"\"\"\n    if text == \"Server received, But no response!! \\n \":\n        return []\n\n    return [cls(match.group(1), match.group(2)) for match in REGEX.finditer(text) if match]\n</code></pre>"},{"location":"reference/async_arkon/types/mixins/","title":"mixins","text":""},{"location":"reference/async_arkon/types/mixins/#async_arkon.types.mixins.AdminMixin","title":"<code>AdminMixin</code>","text":"<p>Mixin that provides admin related functions.</p> Source code in <code>src\\async_arkon\\types\\mixins.py</code> <pre><code>class AdminMixin:\n    \"\"\"Mixin that provides admin related functions.\"\"\"\n\n    async def saveworld(self: MixinProtocol) -&gt; None:\n        \"\"\"Trigger a world save command.\"\"\"\n        await self.run(\"saveworld\", raw=False)\n\n    async def broadcast(self: MixinProtocol, msg: str) -&gt; None:\n        \"\"\"Broadcast a message to the server.\"\"\"\n        await self.run(\"broadcast\", msg, raw=False)\n</code></pre>"},{"location":"reference/async_arkon/types/mixins/#async_arkon.types.mixins.AdminMixin.broadcast","title":"<code>broadcast(msg)</code>  <code>async</code>","text":"<p>Broadcast a message to the server.</p> Source code in <code>src\\async_arkon\\types\\mixins.py</code> <pre><code>async def broadcast(self: MixinProtocol, msg: str) -&gt; None:\n    \"\"\"Broadcast a message to the server.\"\"\"\n    await self.run(\"broadcast\", msg, raw=False)\n</code></pre>"},{"location":"reference/async_arkon/types/mixins/#async_arkon.types.mixins.AdminMixin.saveworld","title":"<code>saveworld()</code>  <code>async</code>","text":"<p>Trigger a world save command.</p> Source code in <code>src\\async_arkon\\types\\mixins.py</code> <pre><code>async def saveworld(self: MixinProtocol) -&gt; None:\n    \"\"\"Trigger a world save command.\"\"\"\n    await self.run(\"saveworld\", raw=False)\n</code></pre>"},{"location":"reference/async_arkon/types/mixins/#async_arkon.types.mixins.ChatMixin","title":"<code>ChatMixin</code>","text":"<p>Mixin that provides chat related functions.</p> Source code in <code>src\\async_arkon\\types\\mixins.py</code> <pre><code>class ChatMixin:\n    \"\"\"Mixin that provides chat related functions.\"\"\"\n\n    async def chat(self: MixinProtocol, username: Optional[str] = None, *, msg: str) -&gt; None:\n        \"\"\"Send a message to the server, prefix an optional username.\"\"\"\n        if username:\n            msg = f\"{username}: {msg}\"\n\n        await self.run(\"serverchat\", msg, raw=True)\n</code></pre>"},{"location":"reference/async_arkon/types/mixins/#async_arkon.types.mixins.ChatMixin.chat","title":"<code>chat(username=None, *, msg)</code>  <code>async</code>","text":"<p>Send a message to the server, prefix an optional username.</p> Source code in <code>src\\async_arkon\\types\\mixins.py</code> <pre><code>async def chat(self: MixinProtocol, username: Optional[str] = None, *, msg: str) -&gt; None:\n    \"\"\"Send a message to the server, prefix an optional username.\"\"\"\n    if username:\n        msg = f\"{username}: {msg}\"\n\n    await self.run(\"serverchat\", msg, raw=True)\n</code></pre>"},{"location":"reference/async_arkon/types/mixins/#async_arkon.types.mixins.InfoMixin","title":"<code>InfoMixin</code>","text":"<p>Mixin that adds server information functions.</p> Source code in <code>src\\async_arkon\\types\\mixins.py</code> <pre><code>class InfoMixin:\n    \"\"\"Mixin that adds server information functions.\"\"\"\n\n    async def fetch_online_players(self: MixinProtocol) -&gt; List[Player]:\n        response = await self.run(\"listplayers\", raw=False)\n\n        if response.strip() == \"No Players Connected\":\n            return []\n\n        return [Player.from_response(line) for line in response.split(\"\\n\") if line.strip()]\n</code></pre>"},{"location":"reference/async_arkon/types/mixins/#async_arkon.types.mixins.MixinProtocol","title":"<code>MixinProtocol</code>","text":"<p>             Bases: <code>Protocol</code></p> <p>Protocol for the RCON client Mixins.</p> Source code in <code>src\\async_arkon\\types\\mixins.py</code> <pre><code>class MixinProtocol(Protocol):\n    \"\"\"Protocol for the RCON client Mixins.\"\"\"\n\n    @overload\n    async def run(self, command: str, *arguments: str, raw: Literal[False]) -&gt; str:\n        ...\n\n    @overload\n    async def run(self, command: str, *arguments: str, raw: Literal[True]) -&gt; Packet:\n        ...\n\n    async def run(self, command: str, *arguments: str, raw: bool = False) -&gt; Union[Packet, str]:\n        \"\"\"Build and execute and send an RCON command to the server.\n\n        Parameters\n        ----------\n        command: str\n            The command being sent to the RCON server.\n        *arguments: str\n            Extra arguments for the command.\n        raw: bool, False\n            Whether the response should be a raw Packet or the payload str.\n\n        Returns\n        -------\n        Union[Packet, str]\n            The raw response Packet or the str value of Packet.payload.\n        \"\"\"\n        ...\n</code></pre>"},{"location":"reference/async_arkon/types/mixins/#async_arkon.types.mixins.MixinProtocol.run","title":"<code>run(command, *arguments, raw=False)</code>  <code>async</code>","text":"<p>Build and execute and send an RCON command to the server.</p> <p>Parameters:</p> <ul> <li> <code>command</code>             (<code>str</code>)         \u2013          <p>The command being sent to the RCON server.</p> </li> <li> <code>*arguments</code>             (<code>str</code>, default:                 <code>()</code> )         \u2013          <p>Extra arguments for the command.</p> </li> <li> <code>raw</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether the response should be a raw Packet or the payload str.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Union[Packet, str]</code>         \u2013          <p>The raw response Packet or the str value of Packet.payload.</p> </li> </ul> Source code in <code>src\\async_arkon\\types\\mixins.py</code> <pre><code>async def run(self, command: str, *arguments: str, raw: bool = False) -&gt; Union[Packet, str]:\n    \"\"\"Build and execute and send an RCON command to the server.\n\n    Parameters\n    ----------\n    command: str\n        The command being sent to the RCON server.\n    *arguments: str\n        Extra arguments for the command.\n    raw: bool, False\n        Whether the response should be a raw Packet or the payload str.\n\n    Returns\n    -------\n    Union[Packet, str]\n        The raw response Packet or the str value of Packet.payload.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/async_arkon/types/packet/","title":"packet","text":""},{"location":"reference/async_arkon/types/packet/#async_arkon.types.packet.Packet","title":"<code>Packet</code>","text":"<p>             Bases: <code>NamedTuple</code></p> <p>An RCON packet.</p> Source code in <code>src\\async_arkon\\types\\packet.py</code> <pre><code>class Packet(NamedTuple):\n    \"\"\"An RCON packet.\"\"\"\n\n    request_id: int\n    type: PacketType\n    payload: str\n\n    def __bytes__(self) -&gt; bytes:\n        \"\"\"Return the packet as bytes.\"\"\"\n        payload = self.request_id.to_bytes(4, \"little\")\n        payload += bytes(self.type)\n        payload += self.payload.encode()\n        payload += TAIL\n        size = len(payload).to_bytes(4, \"little\")\n        return size + payload\n\n    @classmethod\n    def from_bytes(cls, bytes_: bytes) -&gt; Packet:\n        \"\"\"Create a packet from the respective bytes.\"\"\"\n        request_id = int.from_bytes(bytes_[:4], \"little\")\n        type_ = int.from_bytes(bytes_[4:8], \"little\")\n        payload = bytes_[8:-2]\n        tail = bytes_[-2:]\n\n        if tail != TAIL:\n            raise errors.InvalidPacketStructure\n\n        return cls(request_id, PacketType(type_), payload.decode())\n\n    @classmethod\n    def from_command(cls, command: str) -&gt; Packet:\n        \"\"\"Create a command packet.\"\"\"\n        return cls(_rand_uint32(), PacketType.COMMAND, command)\n\n    @classmethod\n    def from_login(cls, passwd: str) -&gt; Packet:\n        \"\"\"Create a login packet.\"\"\"\n        return cls(_rand_uint32(), PacketType.LOGIN, passwd)\n</code></pre>"},{"location":"reference/async_arkon/types/packet/#async_arkon.types.packet.Packet.__bytes__","title":"<code>__bytes__()</code>","text":"<p>Return the packet as bytes.</p> Source code in <code>src\\async_arkon\\types\\packet.py</code> <pre><code>def __bytes__(self) -&gt; bytes:\n    \"\"\"Return the packet as bytes.\"\"\"\n    payload = self.request_id.to_bytes(4, \"little\")\n    payload += bytes(self.type)\n    payload += self.payload.encode()\n    payload += TAIL\n    size = len(payload).to_bytes(4, \"little\")\n    return size + payload\n</code></pre>"},{"location":"reference/async_arkon/types/packet/#async_arkon.types.packet.Packet.from_bytes","title":"<code>from_bytes(bytes_)</code>  <code>classmethod</code>","text":"<p>Create a packet from the respective bytes.</p> Source code in <code>src\\async_arkon\\types\\packet.py</code> <pre><code>@classmethod\ndef from_bytes(cls, bytes_: bytes) -&gt; Packet:\n    \"\"\"Create a packet from the respective bytes.\"\"\"\n    request_id = int.from_bytes(bytes_[:4], \"little\")\n    type_ = int.from_bytes(bytes_[4:8], \"little\")\n    payload = bytes_[8:-2]\n    tail = bytes_[-2:]\n\n    if tail != TAIL:\n        raise errors.InvalidPacketStructure\n\n    return cls(request_id, PacketType(type_), payload.decode())\n</code></pre>"},{"location":"reference/async_arkon/types/packet/#async_arkon.types.packet.Packet.from_command","title":"<code>from_command(command)</code>  <code>classmethod</code>","text":"<p>Create a command packet.</p> Source code in <code>src\\async_arkon\\types\\packet.py</code> <pre><code>@classmethod\ndef from_command(cls, command: str) -&gt; Packet:\n    \"\"\"Create a command packet.\"\"\"\n    return cls(_rand_uint32(), PacketType.COMMAND, command)\n</code></pre>"},{"location":"reference/async_arkon/types/packet/#async_arkon.types.packet.Packet.from_login","title":"<code>from_login(passwd)</code>  <code>classmethod</code>","text":"<p>Create a login packet.</p> Source code in <code>src\\async_arkon\\types\\packet.py</code> <pre><code>@classmethod\ndef from_login(cls, passwd: str) -&gt; Packet:\n    \"\"\"Create a login packet.\"\"\"\n    return cls(_rand_uint32(), PacketType.LOGIN, passwd)\n</code></pre>"},{"location":"reference/async_arkon/types/packet/#async_arkon.types.packet.PacketType","title":"<code>PacketType</code>","text":"<p>             Bases: <code>int</code>, <code>Enum</code></p> <p>Represents a packet type.</p> Source code in <code>src\\async_arkon\\types\\packet.py</code> <pre><code>class PacketType(int, Enum):\n    \"\"\"Represents a packet type.\"\"\"\n\n    LOGIN = 3\n    COMMAND = 2\n    RESPONSE = 0\n\n    def __bytes__(self) -&gt; bytes:\n        \"\"\"Return integer value as bytes.\"\"\"\n        return self.value.to_bytes(4, \"little\")\n</code></pre>"},{"location":"reference/async_arkon/types/packet/#async_arkon.types.packet.PacketType.__bytes__","title":"<code>__bytes__()</code>","text":"<p>Return integer value as bytes.</p> Source code in <code>src\\async_arkon\\types\\packet.py</code> <pre><code>def __bytes__(self) -&gt; bytes:\n    \"\"\"Return integer value as bytes.\"\"\"\n    return self.value.to_bytes(4, \"little\")\n</code></pre>"},{"location":"reference/async_arkon/types/player/","title":"player","text":""},{"location":"reference/async_arkon/types/player/#async_arkon.types.player.Player","title":"<code>Player</code>","text":"<p>             Bases: <code>NamedTuple</code></p> <p>Online player information.</p> Source code in <code>src\\async_arkon\\types\\player.py</code> <pre><code>class Player(NamedTuple):\n    \"\"\"Online player information.\"\"\"\n\n    id: int\n    name: str\n\n    @classmethod\n    def from_response(cls, line: str) -&gt; Self:\n        \"\"\"Create player information from a line in the server response.\"\"\"\n        match = re.match(r\"(\\d+)\\.\\s+(.+?),\\s+(\\d+)\", line)\n\n        if not match:\n            msg = \"Unable to parse online players from response.\"\n            raise errors.InvalidPacketStructure(msg)\n\n        id = int(match.group(1))\n        name = match.group(2)\n        return cls(id, name)\n</code></pre>"},{"location":"reference/async_arkon/types/player/#async_arkon.types.player.Player.from_response","title":"<code>from_response(line)</code>  <code>classmethod</code>","text":"<p>Create player information from a line in the server response.</p> Source code in <code>src\\async_arkon\\types\\player.py</code> <pre><code>@classmethod\ndef from_response(cls, line: str) -&gt; Self:\n    \"\"\"Create player information from a line in the server response.\"\"\"\n    match = re.match(r\"(\\d+)\\.\\s+(.+?),\\s+(\\d+)\", line)\n\n    if not match:\n        msg = \"Unable to parse online players from response.\"\n        raise errors.InvalidPacketStructure(msg)\n\n    id = int(match.group(1))\n    name = match.group(2)\n    return cls(id, name)\n</code></pre>"}]}